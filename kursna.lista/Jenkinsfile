
	node {

		def APP_NAME = 'kursna-lista'
		def PROJECT_NAME = 'kursna-lista'
		def WORKING_DIR = 'kursna-lista/kursna.lista'
		def SERVICE_ACCOUNT = ''
		def ENCODED_AUTH = ''
		def GIT_REPO = "https://github.com/markocrnic/kursna-lista.git"
		def IMAGE = 'registry.access.redhat.com/redhat-openjdk-18/openjdk18-openshift'
		def ENV_VARIABLES = ''
		def TEST_ENV_VARIABLES = [ "test=test", "test1=test"]
		
		def JOB_DIRECTORY = ''
		
		def CREATE_ROUTE = 'true'
		def CREATE_ENV_VARIABLES = 'false'
		def CREATE_AUTOSCALER = 'false'
		def CREATE_HEALTH_PROBES = 'true'
		def EXTERNAL_DEPENDENCY = 'false'
		
		def ROUTE_NAME = "${APP_NAME}-route"
		def HOSTNAME = "${APP_NAME}-${PROJECT_NAME}.apps.grrr.vau.av"
		def PATH = "/"
		
		def mvnHome = tool name: 'mvn', type: 'maven'
		def mvnCmd = "${mvnHome}/bin/mvn  -ntp -Dmaven.repo.local=/home/jenkins/agent/workspace/"
		
		// Checkout Source Code
		stage('Checkout Source Code') {
		
		  sh "rm -rf ${WORKING_DIR}"
		  sh "git clone ${GIT_REPO}"
		  
		  echo "Git clone finished successfully!"
		  
		}
		
		// Install external jar dependencies
		stage ('Install external dependecies') {
		
			if ("${EXTERNAL_DEPENDENCY}" == "true") {
					
				echo "Installing external dependencies"
					
			} else {
				
				echo "No external dependencies found ... Skipping step."
				
			}
			
		}
		
		dir(WORKING_DIR){
			
			// Extract version and other properties from the pom.xml
			echo "Extract version, artifactId and groupId from pom.xml"
			
			def version = readMavenPom().getVersion()
			def artifactId = readMavenPom().getArtifactId()
			def groupId = readMavenPom().getGroupId()
			
			echo "Version: ${version}"
            echo "ArtifactId: ${artifactId}"
			echo "GroupId: ${groupId}"
			
			JOB_DIRECTORY = pwd()
			
			// Using Maven build the jar file, in this step tests are not run
			stage('Build Application Binary') {
			
				echo "Building jar file"
				sh "${mvnCmd} clean package -DskipTests=true"
				
			}
			
			// Using Maven run the unit tests
			withEnv(TEST_ENV_VARIABLES) {
				stage('Unit and Integration Tests') {
				
					echo "Running Unit Tests"
					sh "${mvnCmd} test -DskipTests=false"
					
				}
			}
			
			stage('Code & Binary analysis') {
				def scannerHome = tool 'SonnarScanner';
				withSonarQubeEnv {		
					sh "${scannerHome}/bin/sonar-scanner -Dsonar.userHome=/home/jenkins/agent/workspace/ -Dsonar.projectKey=kursna-lista -Dsonar.sources=/home/jenkins/agent/workspace/test-pipeline-from-git/kursna-lista/kursna.lista/src/main/java -Dsonar.java.binaries=/home/jenkins/agent/workspace/test-pipeline-from-git/kursna-lista/kursna.lista/target/${artifactId}-${version}.jar"
				}
			}
		
			// Create or replace Image builder artifacts
			stage('Create Image Builder') {
			
				echo "Creating Image Builder"
				sh "if oc get bc ${APP_NAME} --namespace=jenkins; \
					then echo \"exist\"; \
					else oc new-build --binary=true --name=${APP_NAME} ${IMAGE} --labels=app=${APP_NAME} -n jenkins;fi"
			
			}
			
			// Build the OpenShift Image in OpenShift.
			stage('Build OpenShift Image') {
			
				// Start Binary Build in OpenShift jenkins project using the file we just published
				
				echo "Building OpenShift container image ${APP_NAME}"
				
				sh "oc start-build ${APP_NAME} --follow --from-file=target/${artifactId}-${version}.jar -n jenkins"
				
				echo "oc start build complete."
			
			}
		}
		
		// Copy image to project
		stage('Copy Image to Project'){
			openshift.withCluster(){
			  
			  echo "Taging image so it can be accessed from another project"
			  sh "oc tag ${APP_NAME}:latest ${PROJECT_NAME}/${APP_NAME}:latest"
			  
			}
			
			// Deploy the built image.
			stage('Configure Deployment') {
				echo "Deploying container image"
				openshift.withCluster(){

					  // Switch to target project on remote cluster
					openshift.withProject( "${PROJECT_NAME}" ) {
					  
						echo "Using project: ${openshift.project()}"

						//Create application if it does not exist
						def deploymentSelector = openshift.selector( "dc", "${APP_NAME}")
						def deploymentExists = deploymentSelector.exists()
						if (!deploymentExists) {
						  echo "Deployment ${APP_NAME} does not exist"
						  sh "oc create dc ${APP_NAME} --image=image-registry.openshift-image-registry.svc:5000/${PROJECT_NAME}/${APP_NAME}:latest -n ${PROJECT_NAME}"
						  sh "oc expose dc/${APP_NAME} --port 8080 -n kursna-lista"
						  
						  // If error related to environment variables exists, return if statement for env variables inside this if statement
						  
						}
						
						echo "Deployment ${APP_NAME} exists"
						
						// Create env variables if required
						if ("${CREATE_ENV_VARIABLES}" == "true") {
							
							echo "Setting environment variables"
							sh 'oc set env -n ' + PROJECT_NAME + ' dc/' + APP_NAME + ENV_VARIABLES
							
						}
						
						// Create health probes if required
						if ("${CREATE_HEALTH_PROBES}" == "true") {
							
							//Set health probes
							echo "Creating liveness and readiness probes"
							openshift.raw("set","probe","dc/${APP_NAME}","--namespace=${PROJECT_NAME}","--liveness","--failure-threshold","5","--initial-delay-seconds","90","--get-url=http://:8080/actuator/health")
							openshift.raw("set","probe","dc/${APP_NAME}","--namespace=${PROJECT_NAME}","--readiness","--failure-threshold 5","--initial-delay-seconds","90","--get-url=http://:8080/actuator/health")
							
						}

						// Create an external facing route if required
						if ("${CREATE_ROUTE}" == "true") {
							if(openshift.selector("route", ROUTE_NAME).exists()) {
								echo "Route already exposed."
							}else{
								sh 'oc expose service ' + APP_NAME + ' -n ' + PROJECT_NAME + ' --name=' + ROUTE_NAME +  ' --hostname=' + HOSTNAME + ' --path=' + PATH
							}
						}

						//Update the Image on the Development Deployment Config
						openshift.raw("set","image dc/${APP_NAME}","default-container=${APP_NAME}:latest","--source=imagestreamtag",
								"-n ${PROJECT_NAME}")
						
						
						// Create autoscaler for container if required
						if ("${CREATE_AUTOSCALER}" == "true") {
							
							// Create autoscaler
							echo "Setting autoscaling for container"
							if(openshift.selector("hpa", APP_NAME).exists()) {
							
								echo "Autoscaler already exists for " + APP_NAME
								echo "Setting resources for autoscaler"
								sh 'oc set resources dc/' + APP_NAME + ' --limits cpu=150m --requests cpu=10m'
								
							}else{
								echo "Autoscaler doesnt exist for " + APP_NAME + ", creating new autoscaler"
								sh 'oc autoscale dc/' + APP_NAME + ' --namespace=' + PROJECT_NAME + ' --max 10 --cpu-percent=80'
								sh 'oc set resources dc/' + APP_NAME + ' --limits cpu=150m --requests cpu=10m'
								
							}
						}
					}
				}
			}
		}
		stage("Rollout to Developmemt"){
		
			openshift.withCluster(){
			
				openshift.withProject( "${PROJECT_NAME}" ) {
				
					if(openshift.selector("dc", APP_NAME).exists()){
					
						def deployment = openshift.selector('dc', "${APP_NAME}")

						timeout(time:10, unit:'MINUTES') {
						  deployment.rollout().status()
						}
					}
				}
			}
		}
		stage("Push Openshift Image to artifactory"){
			openshift.withCluster(){
			
				openshift.withProject( "jenkins" ) {
				
					dir(JOB_DIRECTORY){
						
						echo "Uploading image to artifactory"
						
					}
				}
			}
		}
		
		stage("Performance testing"){
			echo "Performance Testing"
		}
	}
